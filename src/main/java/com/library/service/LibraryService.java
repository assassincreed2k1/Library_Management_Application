package com.library.service;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

/**
 * The LibraryService class provides services for managing a library database,
 * including
 * generating unique IDs, creating necessary tables, and managing an ID counter
 * and deleted IDs.
 */
public class LibraryService {
    final protected String url = "jdbc:sqlite:db/library.db";

    /**
     * Constructor for the LibraryService class. It initializes the database
     * connection,
     * creates necessary tables, loads the ID counter, and loads deleted IDs from
     * the database.
     */
    public LibraryService() {
        createDataBase();
        createIDGeneratorTable();
    }

    /**
     * Creates a new database connection if it doesn't already exist.
     * Displays the driver name and confirmation message if the database is created.
     */
    public void createDataBase() {
        try (Connection cn = DriverManager.getConnection(url)) {
            DatabaseMetaData meta = cn.getMetaData();
            System.out.println("The driver name is " + meta.getDriverName());
            System.out.println("A new database has been created");
        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

    /**
     * Creates a table in the database using the provided SQL statement.
     * 
     * @param sql_statement The SQL statement used to create the table.
     */
    protected void createList(String sql_statement) {
        try (Connection conn = DriverManager.getConnection(url);
                Statement stmt = conn.createStatement()) {
            stmt.execute(sql_statement);
            System.out.println("Table created or already created");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * delete table from database.
     * 
     * @param table name of table that want to delete
     */
    public void deleteTable(String table) {
        String sql_statement = "DROP TABLE " + table + ";";

        try (Connection conn = DriverManager.getConnection(url);
                Statement stmt = conn.createStatement()) {
            stmt.execute(sql_statement);
            System.out.println("drop table successfully\n");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Creates the id_generator table for generating unique IDs.
     * The table contains an auto-incrementing primary key.
     */
    private void createIDGeneratorTable() {
        String sql_statement = "CREATE TABLE IF NOT EXISTS id_generator ("
                + "id INTEGER PRIMARY KEY AUTOINCREMENT)";

        try (Connection conn = DriverManager.getConnection(url);
                Statement stmt = conn.createStatement()) {
            stmt.execute(sql_statement);
            System.out.println("Table id_generator created or already exists");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Generates a new unique ID by retrieving the next auto-incremented ID from the
     * database.
     * This function inserts a dummy row to generate an ID and then removes the row.
     * 
     * @param type The type of ID to generate:
     *             0 - Librarian (L)
     *             1 - Student (S)
     *             3 - Book (B)
     *             4 - Magazine (M)
     *             5 - News (N)
     * @return A new unique ID generated by the database with a corresponding
     *         suffix.
     */
    public String generateID(int type) {
        String generatedID = null;
        String suffix = "";

        // Determine the suffix based on type
        switch (type) {
            case 0:
                suffix = "L"; // Librarian
                break;
            case 1:
                suffix = "S"; // Student
                break;
            case 3:
                suffix = "B"; // Book
                break;
            case 4:
                suffix = "M"; // Magazine
                break;
            case 5:
                suffix = "N"; // News
                break;
            default:
                throw new IllegalArgumentException("Invalid type: " + type);
        }

        String sql = "INSERT INTO id_generator DEFAULT VALUES";
        try (Connection conn = DriverManager.getConnection(url);
                PreparedStatement pstmt = conn.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {

            // Execute the insert and get the generated ID
            pstmt.executeUpdate();

            // Retrieve the generated ID
            try (ResultSet rs = pstmt.getGeneratedKeys()) {
                if (rs.next()) {
                    long val = rs.getLong(1);
                    generatedID = "LM" + String.format("%09d", val) + suffix; // Add suffix
                }
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return generatedID;
    }

}
